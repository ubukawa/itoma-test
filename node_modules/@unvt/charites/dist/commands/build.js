"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildWatch = exports.build = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const yaml_parser_1 = require("../lib/yaml-parser");
const validate_style_1 = require("../lib/validate-style");
const build_sprite_1 = require("../lib/build-sprite");
const get_sprite_slug_1 = require("../lib/get-sprite-slug");
const defaultValues_1 = require("../lib/defaultValues");
const jsonminify_1 = __importDefault(require("jsonminify"));
const node_watch_1 = __importDefault(require("node-watch"));
async function build(source, destination, options) {
    let sourcePath = path_1.default.resolve(process.cwd(), source);
    // The `source` is absolute path.
    if (source.match(/^\//)) {
        sourcePath = source;
    }
    if (!fs_1.default.existsSync(sourcePath)) {
        throw `${sourcePath}: No such file or directory`;
    }
    let destinationPath = '';
    if (destination) {
        if (destination.match(/^\//)) {
            destinationPath = destination;
        }
        else {
            destinationPath = path_1.default.resolve(process.cwd(), destination);
        }
    }
    else {
        destinationPath = path_1.default.join(path_1.default.dirname(sourcePath), `${path_1.default.basename(source, '.yml')}.json`);
    }
    let provider = defaultValues_1.defaultValues.provider;
    if (options.provider) {
        provider = options.provider;
    }
    let style = '';
    try {
        const _style = yaml_parser_1.parser(sourcePath);
        validate_style_1.validateStyle(_style, provider);
        if (options.spriteUrl && 'sprite' in _style) {
            _style.sprite = options.spriteUrl;
        }
        style = JSON.stringify(_style, null, '  ');
        if (options.spriteInput && options.spriteOutput) {
            if (!fs_1.default.existsSync(options.spriteInput)) {
                throw `${options.spriteInput}: No such directory. Please specify valid icon input directory. For more help run charites build --help`;
            }
            if (!fs_1.default.existsSync(options.spriteOutput)) {
                throw `${options.spriteOutput}: No such directory. Please specify valid icon output directory. For more help run charites build --help`;
            }
            const iconSlug = get_sprite_slug_1.getSpriteSlug(JSON.parse(style));
            if (!iconSlug) {
                throw `Invalid sprite url format.`;
            }
            await build_sprite_1.buildSprite(options.spriteInput, options.spriteOutput, iconSlug);
        }
        if (options.compactOutput) {
            style = jsonminify_1.default(style);
        }
    }
    catch (err) {
        if (err) {
            throw err;
        }
        else {
            throw `${sourcePath}: Invalid YAML syntax`;
        }
    }
    try {
        fs_1.default.writeFileSync(destinationPath, style);
    }
    catch (err) {
        throw `${destinationPath}: Permission denied`;
    }
}
exports.build = build;
function buildWatch(source, destination, options) {
    let sourcePath = path_1.default.resolve(process.cwd(), source);
    if (source.match(/^\//)) {
        sourcePath = source;
    }
    console.log(path_1.default.dirname(sourcePath));
    return node_watch_1.default(path_1.default.dirname(sourcePath), { recursive: true, filter: /\.yml$/ }, (event, file) => {
        console.log(`${(event || '').toUpperCase()}: ${file}`);
        try {
            build(source, destination, options);
        }
        catch (e) {
            // Nothing to do
        }
    });
}
exports.buildWatch = buildWatch;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildSprite = void 0;
const spritezero = require('@mapbox/spritezero');
const fs = require('fs');
const glob = require('glob');
const path = require('path');
function generateLayoutAsync(option) {
    return new Promise((resolve, reject) => {
        spritezero.generateLayout(option, (err, result) => {
            if (err)
                reject(err);
            else
                resolve(result);
        });
    });
}
function generateImageAsync(option) {
    return new Promise((resolve, reject) => {
        spritezero.generateImage(option, (err, result) => {
            if (err)
                reject(err);
            else
                resolve(result);
        });
    });
}
async function buildSprite(svgPath, publicPath, iconSlug) {
    const pxRatios = [1, 2];
    for (let i = 0; i < pxRatios.length; i++) {
        const pxRatio = pxRatios[i];
        const svgFiles = glob
            .sync(path.join(svgPath, `*.svg`))
            .map(function (iconPath) {
            return {
                svg: fs.readFileSync(iconPath),
                id: path.basename(iconPath).replace('.svg', ''),
            };
        });
        let file = '';
        if (pxRatio > 1) {
            file = `@${pxRatio}x`;
        }
        const pngPath = path.join(publicPath, `${iconSlug}${file}.png`);
        const jsonPath = path.join(publicPath, `${iconSlug}${file}.json`);
        try {
            const dataLayout = await generateLayoutAsync({
                imgs: svgFiles,
                pixelRatio: pxRatio,
                format: true,
            });
            fs.writeFileSync(jsonPath, JSON.stringify(dataLayout));
        }
        catch (error) {
            throw `${publicPath}: No such file or directory`;
        }
        try {
            const imageLayout = await generateLayoutAsync({
                imgs: svgFiles,
                pixelRatio: pxRatio,
                format: false,
            });
            const image = await generateImageAsync(imageLayout);
            fs.writeFileSync(pngPath, image);
        }
        catch (error) {
            throw `${publicPath}: No such file or directory`;
        }
    }
}
exports.buildSprite = buildSprite;
